pragma solidity ^0.4.24;
// Define a contract 'Supplychain'
contract SupplyChain {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'Books' that maps the UPC to an Book.
  mapping (uint => Book) Books;

  // Define a public mapping 'BooksHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) BooksHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Abstract,  // 0
    Submited,  // 1
    Approved,  // 2
    Written,   // 3
    Reviewed,  // 4
    Order,     // 5
    Produce,   // 6
    Shipped,   // 7
    Received   // 8
    }

  State constant defaultState = State.Abstract;

  // Define a struct 'Book' with the following fields:
  struct Book {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Writer, goes on the package, can be verified by the Library
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 9 stages
    address originWriterID; // Metamask-Ethereum address of the Writer
    string  originWriterName; // Writer Name
    string  originWriterAbstract;  // Writer Information
    string abstract; // Book Abstract
    string draft; // Book Draft
    string finalText; // Book final version
    // string  originWriterLatitude; // Farm Latitude
    // string  originWriterLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   BookState;  // Product State as represented in the enum above
    address publisherID;  // Metamask-Ethereum address of the Publisher
    string urlToOrder; // Publisher URL to catalog or to order the book
    address reviewerID;  // Metamask-Ethereum address of the Reviewer
    address libraryID; // Metamask-Ethereum address of the Library
  }

  // Define 9 events with the same 9 state values and accept 'upc' as input argument
  event Abstract(uint upc);
  event Submited(uint upc);
  event Approved(uint upc);
  event Written(uint upc);
  event Reviewed(uint upc);
  event Ordered(uint upc);
  event Produced(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = Books[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    Books[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an Book.state of a upc is Abstract
  modifier abstract (uint _upc) {
    require(Books[_upc].BookState == State.Abstract);
    _;
  }

  // Define a modifier that checks if an Book.state of a upc is Processed
  modifier processed(uint _upc) {

    _;
  }
  
  // Define a modifier that checks if an Book.state of a upc is Packed
  modifier packed(uint _upc) {

    _;
  }

  // Define a modifier that checks if an Book.state of a upc is ForSale
  modifier forSale(uint _upc) {

    _;
  }

  // Define a modifier that checks if an Book.state of a upc is Sold
  modifier sold(uint _upc) {

    _;
  }
  
  // Define a modifier that checks if an Book.state of a upc is Shipped
  modifier shipped(uint _upc) {

    _;
  }

  // Define a modifier that checks if an Book.state of a upc is Received
  modifier received(uint _upc) {

    _;
  }

  // Define a modifier that checks if an Book.state of a upc is Purchased
  modifier purchased(uint _upc) {
    
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

  // Define a function 'harvestBook' that allows a Writer to mark an Book 'Harvested'
  function harvestBook(uint _upc, address _originWriterID, string _originFarmName, string _originFarmInformation, string  _originFarmLatitude, string  _originFarmLongitude, string  _productNotes) public 
  {
    // Add the new Book as part of Harvest
    
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    
  }

  // Define a function 'processtBook' that allows a Writer to mark an Book 'Processed'
  function processBook(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'packBook' that allows a Writer to mark an Book 'Packed'
  function packBook(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'sellBook' that allows a Writer to mark an Book 'ForSale'
  function sellBook(uint _upc, uint _price) public 
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'buyBook' that allows the disributor to mark an Book 'Sold'
  // Use the above defined modifiers to check if the Book is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyBook(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Call modifer to check if buyer has paid enough
    
    // Call modifer to send any excess ether back to buyer
    
    {
    
    // Update the appropriate fields - ownerID, distributorID, BookState
    
    // Transfer money to Writer
    
    // emit the appropriate event
    
  }

  // Define a function 'shipBook' that allows the distributor to mark an Book 'Shipped'
  // Use the above modifers to check if the Book is sold
  function shipBook(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Call modifier to verify caller of this function
    
    {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'receiveBook' that allows the retailer to mark an Book 'Received'
  // Use the above modifiers to check if the Book is shipped
  function receiveBook(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, retailerID, BookState
    
    // Emit the appropriate event
    
  }

  // Define a function 'purchaseBook' that allows the consumer to mark an Book 'Purchased'
  // Use the above modifiers to check if the Book is received
  function purchaseBook(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, consumerID, BookState
    
    // Emit the appropriate event
    
  }

  // Define a function 'fetchBookBufferOne' that fetches the data
  function fetchBookBufferOne(uint _upc) public view returns 
  (
  uint    BookSKU,
  uint    BookUPC,
  address ownerID,
  address originWriterID,
  string  originFarmName,
  string  originFarmInformation,
  string  originFarmLatitude,
  string  originFarmLongitude
  ) 
  {
  // Assign values to the 8 parameters
  
    
  return 
  (
  BookSKU,
  BookUPC,
  ownerID,
  originWriterID,
  originFarmName,
  originFarmInformation,
  originFarmLatitude,
  originFarmLongitude
  );
  }

  // Define a function 'fetchBookBufferTwo' that fetches the data
  function fetchBookBufferTwo(uint _upc) public view returns 
  (
  uint    BookSKU,
  uint    BookUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    BookState,
  address distributorID,
  address retailerID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
  
    
  return 
  (
  BookSKU,
  BookUPC,
  productID,
  productNotes,
  productPrice,
  BookState,
  distributorID,
  retailerID,
  consumerID
  );
  }
}
